#include <bits/stdc++.h>

using namespace std;

class node {
public:
	int data;
	node *next;
	node(int d) {
		data = d;
		next = NULL;
	}


};
void insert_at_head(node*&head, int data) {
	if (head == NULL) {
		head = new node(data);
		return ;
	}
	node *n = new node(data);
	n -> next = head;
	head = n;

}
void insert_at_tail(node*& head, int data) {
	if (head == NULL) {
		head = new node(data);
		return ;
	}
	node *tail = head;
	while (tail -> next != NULL) {
		tail = tail -> next;
	}
	node *n = new node(data);
	tail -> next = n;

}
node* take_input() {
	int d;
	cin >> d;
	node *head = NULL;
	while (d != -1) {
		insert_at_tail(head, d); // insert_at_head(head,d);
		cin >> d;
	}
	return head;

}

void print(node*head) {
	while (head != NULL) {
		cout << head -> data << " ";
		head = head -> next;
	}
	cout << endl;
}
ostream& operator<<(ostream &os, node* head) {
	print(head);
	return os;
}
istream& operator>>(istream &is, node*&head) {
	head = take_input();
	return is;
}

void reverse(node*&head){
	node *c = head;
	node* p = NULL;
	node*n;
	while(c!=NULL){
		n = c->next;
		c->next = p;
		p = c;
		c = n;
		
	}
	head = p;
}

void recursiveReverse(node*&head){
	
}

node* midpoint(node*head){
	node*slow = head;
	node*fast = head;
	
	while(fast&&fast->next){
		slow = slow-> next;
		fast = fast -> next -> next;
	}
	return slow;
}

node* merge(node*a,node*b){
	 node* result = NULL; 
      
    /* Base cases */
    if (a == NULL) 
        return(b); 
    else if (b == NULL) 
        return(a); 
      
    /* Pick either a or b, and recur */
    if (a->data <= b->data) 
    { 
        result = a; 
        result->next = merge(a->next, b); 
    } 
    else
    { 
        result = b; 
        result->next = merge(a, b->next); 
    } 
    return(result);
}

node *mergeSort(node* head){
	if(head == NULL || head->next == NULL){
		return head;
	}
	
	node* mid = midpoint(head);
	node *a = head;
	node* b = mid -> next;
	mid -> next = NULL;
	a = mergeSort(a); 
	b = mergeSort(b);
	node *c = merge(a,b);
	return c;
}


int main() {
	node*head1;
	node*head2;
	cin >> head1 >> head2 ;
	cout << head1  << head2;
	reverse(head1);
	cout << head1;
	node*mid = midpoint(head1);
	cout << mid-> data;
	
	
	//node*mergenode = merge(head1,head2); // not working
//	cout << mergenode << endl ;
	
	
	//cout << mergeSort(head1); // not working because of merge not working
	
	
	
	
	
}
 
